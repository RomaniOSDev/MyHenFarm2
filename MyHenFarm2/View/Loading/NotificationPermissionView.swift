//
//  NotificationPermissionView.swift
//  MyHenFarm2
//
//  Created by –†–æ–º–∞–Ω –ì–ª–∞–≤–∞—Ü–∫–∏–π on 21.08.2025.
//

import SwiftUI
import UserNotifications

struct NotificationPermissionView: View {
    
    // MARK: - Properties
    let webURL: URL
    let orientation = UIDevice.current.orientation
    @State private var isAgreed = false
    @State private var backgroundImageName: ImageResource = .notif1
    @State private var notificationStatus: UNAuthorizationStatus = .notDetermined
    
    // MARK: - Initialization
    init(webURL: URL) {
        self.webURL = webURL
    }
    
    // MARK: - Body
    var body: some View {
        ZStack {
            // Background image
            
            if orientation.isPortrait {
                Image(backgroundImageName)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .ignoresSafeArea()
            }else{
                Image(backgroundImageName)
                    .resizable()
                    .ignoresSafeArea()
            }
                
            
            // Content - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
            if notificationStatus == .notDetermined {
                VStack(spacing: 0) {
                    Spacer()
                    
                    // Icon
                    Image("logo")
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(width: 120, height: 120)
                        .padding(.top, 60)
                    
                    // Title
                    Text("Allow notifications aboutbonuses and promos")
                        .font(.system(size: 24, weight: .bold))
                        .foregroundColor(.white)
                        .multilineTextAlignment(.center)
                        .padding(.top, 40)
                        .padding(.horizontal, 40)
                    
                    // Message
                    Text("Stay tuned with best offers from our casino")
                        .font(.system(size: 16))
                        .foregroundColor(.white.opacity(0.9))
                        .multilineTextAlignment(.center)
                        .padding(.top, 20)
                        .padding(.horizontal, 40)
                    
                    Spacer()
                    
                    // Buttons
                    VStack(spacing: 16) {
                        // Agree button
                        Button(action: {
                            print("‚úÖ User agreed to notifications")
                            isAgreed = true
                            requestNotificationPermission()
                        }) {
                            Text("Yes, I Want Bonuses!")
                                .font(.system(size: 18, weight: .bold))
                                .foregroundColor(.white)
                                .frame(maxWidth: .infinity)
                                .frame(height: 50)
                                .background(Color.blue)
                                .cornerRadius(12)
                        }
                        .padding(.horizontal, 40)
                        
                        // Skip button
                        Button(action: {
                            print("‚è≠Ô∏è User skipped notifications")
                            isAgreed = false
                            openWebView()
                        }) {
                            Text("Skip")
                                .font(.system(size: 16))
                                .foregroundColor(.white)
                                .frame(maxWidth: .infinity)
                                .frame(height: 44)
                                
                        }
                        .padding(.horizontal, 40)
                        .padding(.bottom, 40)
                    }
                }
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                VStack {
                    Spacer()
                    ProgressView()
                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                        .scaleEffect(1.5)
                    Text("Loading...")
                        .foregroundColor(.white)
                        .padding(.top, 20)
                    Spacer()
                }
            }
        }
        .onReceive(NotificationCenter.default.publisher(for: UIDevice.orientationDidChangeNotification)) { _ in
            updateBackgroundForOrientation()
        }
        .onAppear {
            updateBackgroundForOrientation()
            checkNotificationPermissionStatus()
        }
    }
    
    // MARK: - Private Methods
    private func checkNotificationPermissionStatus() {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                self.notificationStatus = settings.authorizationStatus
                print("üîî Notification status: \(self.notificationStatus.rawValue)")
                
                // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º WebView
                if settings.authorizationStatus != .notDetermined {
                    print("üì± Notification permission already determined, opening WebView directly")
                    self.openWebView()
                }
            }
        }
    }
    
    private func updateBackgroundForOrientation() {
        let orientation = UIDevice.current.orientation
        
        withAnimation(.easeInOut(duration: 0.3)) {
            if orientation.isLandscape {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                backgroundImageName = .notif2
            } else {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                backgroundImageName = .notif1
            }
        }
    }
    
    private func requestNotificationPermission() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("‚ùå Notification permission error: \(error.localizedDescription)")
                } else if granted {
                    print("‚úÖ Notification permission granted")
                } else {
                    print("‚ùå Notification permission denied")
                }
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º WebView –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                openWebView()
            }
        }
    }
    
    private func openWebView() {
        print("üåê Opening WebView with URL: \(webURL)")
        
        DispatchQueue.main.async {
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π view controller
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               let window = windowScene.windows.first,
               let rootViewController = window.rootViewController {
                
                print("‚úÖ Found root view controller: \(type(of: rootViewController))")
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–π view controller, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞
                if let presentedVC = rootViewController.presentedViewController {
                    print("üì± Dismissing current modal: \(type(of: presentedVC))")
                    presentedVC.dismiss(animated: true) {
                        print("‚úÖ Modal dismissed, presenting WebView")
                        self.presentWebView(from: rootViewController)
                    }
                } else {
                    print("üì± No modal to dismiss, presenting WebView directly")
                    self.presentWebView(from: rootViewController)
                }
            } else {
                print("‚ùå Could not find root view controller")
            }
        }
    }
    
    private func presentWebView(from viewController: UIViewController) {
        print("üöÄ Creating WebView with URL: \(webURL)")
        let webviewVC = WebviewVC(url: webURL)
        webviewVC.modalPresentationStyle = .fullScreen
        
        print("üì± Presenting WebView from: \(type(of: viewController))")
        viewController.present(webviewVC, animated: true) {
            print("‚úÖ WebView presented successfully")
        }
    }
}

// MARK: - Preview
#Preview {
    NotificationPermissionView(webURL: URL(string: "https://google.com")!)
}
